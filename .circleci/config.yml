version: 2.1

orbs:
  sonarcloud: sonarsource/sonarcloud@2.0.0

executors:
  pythonpygame:
    docker:
      - image: feralbert90/pokepong1:latest  # Dockerfile que se necesita de dockerhub

jobs:
  job-tests:
    executor: pythonpygame
    steps:
      - checkout  # Para obtener el código del repositorio
      # Aquí agregamos los pasos para ejecutar tests, linting, análisis estático, etc.
      - run:
          name: Run tests
          command: | 
                    pytest Game/tests
      - run:
          name: Run linting
          command: | 
                    pylint  --exit-zero Game
      - run:
          name: Run code coverage
          command: |
                    coverage run -m pytest Game
                    coverage report -m 
      - store_test_results:
          path: Game/tests/test-results.xml
      - sonarcloud/scan

  job-deployment:
    executor: pythonpygame
    steps:
      - checkout
      - run:
          name: Install zip and jq
          command: |
            apt-get update && apt-get install -y zip jq
      - run:
          name: Package artifact
          command: |
            mkdir -p artifacts
            zip -r artifacts/myapp.zip Game/*
      - run:
          name: Publish to GitHub Releases
          env:
            GITHUB_TOKEN: $TokenGH  # Deberías definir esta variable en tus secrets
          command: |
            TAG="v1.0.0"  # Cambia esta etiqueta según tu versión
            FILE_TO_UPLOAD="artifacts/myapp.zip"
            UPLOAD_URL=$(curl -s -X POST -H "Authorization: token $TokenGH" "https://api.github.com/repos/albertferal/pokepong/releases" | jq -r '.upload_url')
            UPLOAD_URL="${UPLOAD_URL%\{*}?name=$(basename $FILE_TO_UPLOAD)"
            curl -s -X POST -H "Authorization: token $TokenGH" -H "Content-Type: application/zip" --data-binary @$FILE_TO_UPLOAD "$UPLOAD_URL"

workflows:
  workflow-testing:
    jobs:
      - job-tests:
          context: SonarCloud
      - job-deployment:
          context: GitHubReleases
          requires:
            - job-tests
          filters:
            branches:
              only: main
      # Agrega un trabajo para desplegar en Kubernetes usando ArgoCD
      # Este trabajo solo se ejecutará en la rama master/mainn
